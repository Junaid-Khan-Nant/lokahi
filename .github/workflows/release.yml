name: release

on:
  pull_request:
    types: [ labeled ]

# For now, we have put all steps into a single job, this will allow for just
# one vm to run. We use actions to factor out the functionality. If there is a
# requirement to create additional jobs, maybe to run concurrent jobs, then we
# can split them up later.

jobs:
  release:
    # The label must be as follows and this is only ever run on the default branch.
    if: ${{ ( github.event.label.name == 'actions-release' ) || ( github.event.pull_request.head.ref == github.event.repository.default_branch ) }}
    runs-on: ubuntu-latest
    environment: docker-publish-account
    # Enviroment that contains the required secrets.
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
        # Is required to call actions.

      - name: init
        run: |

          # Get tag from PR title.
          TAG=$(echo ${{github.event.pull_request.title}} | awk '{ print $2 }')
          echo "test - $TAG."

          echo "RELEASE_TAG=$TAG" >> $GITHUB_ENV

          # Validate tag format
          # Format of PR name: RELEASE <tag> - <message>
          # Format of tag (change numbers or dev, but leave everything else): 
          #   v0.0.5-dev
          #   v0.0.5
          if [[ $TAG =~ ^v[0-9]+.[0-9]+.([0-9]+-[a-z]+|[0-9]+)$ ]]
          then
            echo "Valid format, proceed with test."
          else
            echo "Tag format is invalid."
            exit 1
          fi

      - name: feature-ui
        id: action-feature-ui
        uses: ./.github/actions/ui
        with:
          dir-location: 'ui'

      - name: feature-core
        id: action-feature-core
        uses: ./.github/actions/core
        with:
          dir-location: 'platform'

      - name: feature-rest-server
        id: action-rest-server
        uses: ./.github/actions/rest-server
        with:
          dir-location: 'rest-server'

      - name: external-it
        id: action-external-it
        uses: ./.github/actions/external-it
        with:
          dir-location: 'external-it'

      - name: dockerhub-login
        run: |

          # This and the following steps are put here rather than put into an
          # action because it is only ever called from this workflow.

          # Login to dockerhub. The session doesn't seem to carry across steps,
          # re-test to confirm.
          #docker login -u ${{ secrets.DOCKERHUB_LOGIN }} -p ${{ secrets.DOCKERHUB_PASS }}
          echo ${{ secrets.DOCKERHUB_PASS }} | docker login -u ${{ secrets.DOCKERHUB_LOGIN }} --password-stdin

      - name: publish-image-core
        run: |

          # Login to dockerhub.
          echo ${{ secrets.DOCKERHUB_PASS }} | docker login -u ${{ secrets.DOCKERHUB_LOGIN }} --password-stdin

          # Publish core image
          cd platform/

          # Tag and save the image as a file to be published. Both release version and latest.
          docker tag opennms/horizon-stream-core:local opennms/horizon-stream-core:${{ env.RELEASE_TAG }}
          docker tag opennms/horizon-stream-core:local opennms/horizon-stream-core:latest

          docker push opennms/horizon-stream-core:${{ env.RELEASE_TAG }}
          docker push opennms/horizon-stream-core:latest
      
      - name: publish-image-ui
        run: |

          # Login to dockerhub.
          echo ${{ secrets.DOCKERHUB_PASS }} | docker login -u ${{ secrets.DOCKERHUB_LOGIN }} --password-stdin

          # Tag and save the image as a file to be published. Both release version and latest.
          docker tag opennms/horizon-stream-ui:local opennms/horizon-stream-ui:${{ env.RELEASE_TAG }}
          docker tag opennms/horizon-stream-ui:local opennms/horizon-stream-ui:latest

          docker push opennms/horizon-stream-ui:${{ env.RELEASE_TAG }}
          docker push opennms/horizon-stream-ui:latest

      - name: publish-image-rest-server
        run: |

          # Login to dockerhub. Probably could remove this, session created in previous step.
          echo ${{ secrets.DOCKERHUB_PASS }} | docker login -u ${{ secrets.DOCKERHUB_LOGIN }} --password-stdin

          # Test build images
          docker images

          # Tag and save the image as a file to be published. Both release version and latest.
          docker tag opennms/horizon-stream-rest-server:local opennms/horizon-stream-rest-server:${{ env.RELEASE_TAG }}
          docker tag opennms/horizon-stream-rest-server:local opennms/horizon-stream-rest-server:latest

          docker push opennms/horizon-stream-rest-server:${{ env.RELEASE_TAG }}
          docker push opennms/horizon-stream-rest-server:latest

      - name: merge-develop-branch-to-release-branch-and-tag
        run: |

          # The following checkouts the release branch and merges develop into
          # it and then tags release.
          # TODO: What if merge fails? How do we fix while maintaining integrity of release?
          git fetch
          #git --no-pager log --decorate --graph --all --oneline | head -100
          #git remote -v
          git checkout develop 
          git pull origin develop # Update develop branch with new changes
          git checkout release
          git pull origin release # Update release branch, should not have any changes.
          git merge develop
          git tag ${{ env.RELEASE_TAG }}
          git push origin ${{ env.RELEASE_TAG }}

