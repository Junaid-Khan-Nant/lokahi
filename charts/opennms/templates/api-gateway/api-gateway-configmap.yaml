apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.ApiGateway.ServiceName }}-configmap
  labels:
    app: {{ .Values.ApiGateway.ServiceName }}
  namespace: {{ .Values.Namespace }}
data:
  default.conf.template: |
    server {
      proxy_http_version 1.1;
      proxy_set_header Connection "";
      listen       {{ .Values.ApiGateway.Port }};
      listen  [::]:{{ .Values.ApiGateway.Port }};
      server_name  localhost;
      
      set $cors_credentials '';
      set $cors_content_type '';
      set $cors_content_length '';
      if ($http_origin ~ '.+') {
        set $cors_credentials 'true';
      }

      if ($request_method = OPTIONS) {
        set $cors_content_type 'text/plain';
        set $cors_content_length '0';
      }

      add_header Access-Control-Allow-Origin $http_origin always;
      add_header Access-Control-Allow-Credentials $cors_credentials always;
      add_header Access-Control-Allow-Methods $http_access_control_request_method always;
      add_header Access-Control-Allow-Headers $http_access_control_request_headers always;
      add_header Content-Type $cors_content_type;
      add_header Content-Length $cors_content_length;
    
      if ($request_method = OPTIONS) {
        return 204;
      }

      location / {
        auth_request /verifytoken;
        auth_request_set $auth_status $upstream_status;
        proxy_pass ${API_SERVER_URL};
        proxy_hide_header Access-Control-Allow-Origin;
      }

      location /verifytoken {
    	internal;
    	proxy_pass ${KEYCLOAK_URL}/realms/${KEYCLOAK_REALM}/protocol/openid-connect/userinfo;
    	proxy_pass_request_body off;
    	proxy_set_header Content-Length "";
      }

      error_page   500 502 503 504  /50x.html;
      location = /50x.html {
        root   /usr/share/nginx/html;
      }
    }