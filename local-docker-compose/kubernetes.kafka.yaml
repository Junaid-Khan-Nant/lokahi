apiVersion: v1
kind: Service
metadata:
  name: horizon-stream-core
  labels:
    run: my-horizon-stream-core
spec:
  type: ClusterIP
  ports:
    - port: 8101
      protocol: TCP
      name: ssh
    - port: 8181
      protocol: TCP
      name: http
    - port: 5005
      protocol: TCP
      name: debug
  selector:
    run: my-horizon-stream-core
---
apiVersion: v1
kind: Service
metadata:
  name: horizon-stream-api
  labels:
    run: my-horizon-stream-api
spec:
  type: ClusterIP
  ports:
    - port: 9090
      protocol: TCP
      name: http
  selector:
    run: my-horizon-stream-api
---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper
  labels:
    run: my-zookeeper
spec:
  type: ClusterIP
  ports:
    - port: 2181
      protocol: TCP
      name: http
  selector:
    run: my-zookeeper
---
apiVersion: v1
kind: Service
metadata:
  name: kafka
  labels:
    run: my-kafka
spec:
  type: ClusterIP
  ports:
    - port: 9092
      protocol: TCP
      name: http
  selector:
    run: my-kafka
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  labels:
    run: my-postgres
spec:
  type: ClusterIP
  ports:
    - port: 5432
      protocol: TCP
      name: http
  selector:
    run: my-postgres
---
apiVersion: v1
kind: Service
metadata:
  name: keycloak
  labels:
    run: my-keycloak
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
      name: http
    - port: 8443
      protocol: TCP
      name: https
  selector:
    run: my-keycloak
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-zookeeper
spec:
  selector:
    matchLabels:
      run: my-zookeeper
  replicas: 1
  template:
    metadata:
      labels:
        run: my-zookeeper
    spec:
      volumes:
        - name: zookeeper-volume
      containers:
        - name: zookeeper
          image: docker.io/bitnami/zookeeper:3.7
          env:
            - name: ALLOW_ANONYMOUS_LOGIN
              value: "no"
            - name: ZOO_ENABLE_AUTH
              value: "yes"
            - name: ZOO_SERVER_USERS
              value: "zookeeper-user"
            - name: ZOO_SERVER_PASSWORDS
              value: "passw0rd"
            - name: ZOO_CLIENT_USER
              value: "zookeeper-user"
            - name: ZOO_CLIENT_PASSWORD
              value: "passw0rd"
          ports:
            - containerPort: 2181
          volumeMounts:
            - mountPath: /bitnami/zookeeper
              name: zookeeper-volume
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-kafka
spec:
  selector:
    matchLabels:
      run: my-kafka
  replicas: 1
  template:
    metadata:
      labels:
        run: my-kafka
    spec:
      volumes:
        - name: kafka-volume
      containers:
        - name: kafka
          image: docker.io/bitnami/kafka:3
          env:
            - name: KAFKA_CFG_ZOOKEEPER_CONNECT
              value: "zookeeper:2181"
            - name: KAFKA_ZOOKEEPER_PROTOCOL
              value: "SASL"
            - name: KAFKA_ZOOKEEPER_USER
              value: "zookeeper-user"
            - name: KAFKA_ZOOKEEPER_PASSWORD
              value: "passw0rd"
            - name: ALLOW_PLAINTEXT_LISTENER
              value: "yes"
            - name: KAFKA_HOSTNAME
              value: "kafka"
            - name: KAFKA_ADVERTISED_HOST_NAME
              value: "kafka"
            - name: KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP
              value: "CLIENT:PLAINTEXT"
            - name: KAFKA_CFG_LISTENERS
              value: "CLIENT://:9092"
            - name: KAFKA_CFG_ADVERTISED_LISTENERS
              value: "CLIENT://kafka:9092"
            - name: KAFKA_CFG_INTER_BROKER_LISTENER_NAME
              value: "CLIENT"
            - name: KAFKA_CLIENT_USERS
              value: "kafka-user"
            - name: KAFKA_CLIENT_PASSWORDS
              value: "passw0rd"
          ports:
            - containerPort: 9092
          volumeMounts:
            - mountPath: /bitnami/kafka
              name: kafka-volume
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-postgres
spec:
  selector:
    matchLabels:
      run: my-postgres
  replicas: 1
  template:
    metadata:
      labels:
        run: my-postgres
    spec:
      volumes:
        - name: postgres-volume
        - name: postgres-initial-script
          configMap:
            name: postgres-initial-sql
      containers:
        - name: postgres
          image: postgres:13.3-alpine
          env:
            - name: POSTGRES_USER
              value: "postgres"
            - name: POSTGRES_PASSWORD
              value: "passw0rd"
            - name: POSTGRES_HOST_AUTH_METHOD
              value: "trust"
          ports:
            - containerPort: 5432
          volumeMounts:
            - mountPath: "/var/lib/postgresql/data"
              name: postgres-volume
            - mountPath: "/docker-entrypoint-initdb.d/postgres.initial.script.sql"
              name: postgres-initial-script
              subPath: "postgres.initial.script.sql"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-keycloak
spec:
  selector:
    matchLabels:
      run: my-keycloak
  replicas: 1
  template:
    metadata:
      labels:
        run: my-keycloak
    spec:
      containers:
        - name: keycloak
          image: quay.io/keycloak/keycloak:17.0.0
          args: [ "start-dev" ]
          env:
            - name: KEYCLOAK_CREATE_ADMIN_USER
              value: "true"
            - name: KEYCLOAK_ADMIN
              value: "keycloak-admin"
            - name: KEYCLOAK_ADMIN_PASSWORD
              value: "admin"
            - name: KEYCLOAK_DATABASE_HOST 
              value: "postgres"
            - name: KEYCLOAK_DATABASE_USER
              value: "postgres"
            - name: KEYCLOAK_DATABASE_PASSWORD
              value: "unused"
          ports:
            - containerPort: 8080
            - containerPort: 8443
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-horizon-stream-core
spec:
  selector:
    matchLabels:
      run: my-horizon-stream-core
  replicas: 1
  template:
    metadata:
      labels:
        run: my-horizon-stream-core
    spec:
      volumes:
        - name: config-volume
          configMap:
            name: alarmd-camel-config
      containers:
        - name: horizon-stream-core
          image: opennms/horizon-stream-core:local
          imagePullPolicy: Never
          args: [ "-f" ]
          env:
            - name: JAVA_OPTS
              value: "-Djava.security.egd=file:/dev/./urandom -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005"
            - name: PGSQL_SERVICE_NAME
              value: "postgres"
            - name: PGSQL_ADMIN_USERNAME
              value: "postgres"
            - name: PGSQL_ADMIN_PASSWORD
              value: "passw0rd"
            - name: KAFKA_BROKER_HOST
              value: "kafka"
            - name: KAFKA_BROKER_PORT
              value: "9092"
            - name: ACTIVEMQ_BROKER_URL
              value: "tcp://localhost:61616"
            - name: KEYCLOAK_BASE_URL
              value: "http://keycloak:8080"
            - name: KEYCLOAK_ADMIN_USERNAME
              value: "keycloak-admin"
            - name: KEYCLOAK_ADMIN_PASSWORD
              value: "admin"
          ports:
            - containerPort: 8101
            - containerPort: 8181
            - containerPort: 5005
          volumeMounts:
            - name: config-volume
              mountPath: "/opt/horizon-stream/etc/org.opennms.horizon.alarmd.camel.cfg"
              subPath: "org.opennms.horizon.alarmd.camel.cfg"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-horizon-stream-api
spec:
  selector:
    matchLabels:
      run: my-horizon-stream-api
  replicas: 1
  template:
    metadata:
      labels:
        run: my-horizon-stream-api
    spec:
      containers:
        - name: horizon-stream-api
          image: opennms/horizon-stream-api:local
          imagePullPolicy: Never
          env:
            - name: SPRING_DATASOURCE_URL
              value: "jdbc:postgresql://postgres:5432/horizon_stream"
            - name: KEYCLOAK_AUTH-SERVER-URL
              value: "http://keycloak:8080"
            - name: KEYCLOAK_REALM
              value: "opennms"
            - name: KEYCLOAK_ADMIN_USERNAME
              value: "keycloak-admin"
            - name: KEYCLOAK_ADMIN_PASSWORD
              value: "admin"
          ports:
            - containerPort: 9090
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-horizon-stream-ui
spec:
  selector:
    matchLabels:
      app: my-horizon-stream-ui
  template:
    metadata:
      labels:
        app: my-horizon-stream-ui
    spec:
      containers:
        - name: horizon-stream-ui
          image: opennms/horizon-stream-ui:local
          ports:
            - containerPort: 3000
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: alarmd-camel-config
data:
  org.opennms.horizon.alarmd.camel.cfg: |
    useSeda=false
    useKafka=true
    useActiveMq=false
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-initial-sql
data:
  postgres.initial.script.sql: |
    CREATE USER opennms with password 'opennms';
    CREATE DATABASE horizon_stream;
    GRANT ALL ON DATABASE horizon_stream TO opennms;