
apiVersion: v1
kind: Service
metadata:
  name: api-gateway
  labels:
    run: api-gateway
spec:
  type: ClusterIP
  ports:
    - port: 80
      protocol: TCP
      name: gateway-http
  selector:
    run: api-gateway
---
apiVersion: v1
kind: Service
metadata:
  name: mail-server
  labels:
    run: horizon-mail-server
spec:
  type: ClusterIP
  ports:
    - port: 8025
      protocol: TCP
      name: http
    - port: 1025
      protocol: TCP
      name: smtp
  selector:
    run: horizon-mail-server
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: horizon-mail-server
spec:
  selector:
    matchLabels:
      run: horizon-mail-server
  template:
    metadata:
      labels:
        run: horizon-mail-server
    spec:
      containers:
        - name: mail-server
          image: mailhog/mailhog:latest
          ports:
            - containerPort: 8025
            - containerPort: 1025
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway
spec:
  selector:
    matchLabels:
      run: api-gateway
  template:
    metadata:
      labels:
        run: api-gateway
    spec:
      volumes:
        - name: nginx-conf-volume
          configMap:
            name: nginx-conf-template
      containers:
        - name: api-gateway
          image: nginx:1.21.6-alpine
          ports:
            - containerPort: 80
          env:
            - name: API_SERVER_URL
              value: "http://opennms-rest-server:9090"
            - name: KEYCLOAK_URL
              value: "http://keycloak:8080"
            - name: KEYCLOAK_REALM
              value: "opennms"
          volumeMounts:
            - name: nginx-conf-volume
              mountPath: "/etc/nginx/templates/default.conf.template"
              subPath: "default.conf.template"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-conf-template
data:
  default.conf.template: |
    server {
      proxy_http_version 1.1;
      proxy_set_header Connection "";
      listen       80;
      listen  [::]:80;
      server_name  localhost;

      set $cors_credentials '';
      set $cors_content_type '';
      set $cors_content_length '';
      if ($http_origin ~ '.+') {
        set $cors_credentials 'true';
      }

      if ($request_method = OPTIONS) {
        set $cors_content_type 'text/plain';
        set $cors_content_length '0';
      }

      add_header Access-Control-Allow-Origin $http_origin always;
      add_header Access-Control-Allow-Credentials $cors_credentials always;
      add_header Access-Control-Allow-Methods $http_access_control_request_method always;
      add_header Access-Control-Allow-Headers $http_access_control_request_headers always;
      add_header Content-Type $cors_content_type;
      add_header Content-Length $cors_content_length;

      if ($request_method = OPTIONS) {
        return 204;
      }

      location / {
        auth_request /verifytoken;
        auth_request_set $auth_status $upstream_status;
        proxy_pass ${API_SERVER_URL};
        proxy_hide_header Access-Control-Allow-Origin;
      }

      location /verifytoken {
        internal;
        proxy_pass ${KEYCLOAK_URL}/realms/${KEYCLOAK_REALM}/protocol/openid-connect/userinfo;
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
      }

      error_page   500 502 503 504  /50x.html;
      location = /50x.html {
        root   /usr/share/nginx/html;
      }
    }


