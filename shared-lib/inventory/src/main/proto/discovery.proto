/*******************************************************************************
 * This file is part of OpenNMS(R).
 *
 * Copyright (C) 2022 The OpenNMS Group, Inc.
 * OpenNMS(R) is Copyright (C) 1999-2022 The OpenNMS Group, Inc.
 *
 * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.
 *
 * OpenNMS(R) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * OpenNMS(R) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with OpenNMS(R).  If not, see:
 *      http://www.gnu.org/licenses/
 *
 * For more information contact:
 *     OpenNMS(R) Licensing <license@opennms.org>
 *     http://www.opennms.org/
 *     http://www.opennms.com/
 *******************************************************************************/
syntax = "proto3";

import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

package opennms.inventory;
option java_multiple_files = true;
option java_package = "org.opennms.horizon.inventory.discovery";

message DiscoveryConfigRequest {
  string configName = 1;
  string location = 2;
  //can be a single ip address, ip ranges: 127.0.0.1 or 127.0.0.1-127.0.0.10 are valid values
  string ipAddresses = 3;
  string readComStr = 4;
}

message DiscoveryConfigDTO {
  string configName = 1;
  int32 retries = 2;
  int64 timeout = 3;
  //can be a single ip address, ip ranges: 127.0.0.1 or 127.0.0.1-127.0.0.10 are valid values
  string ipAddresses = 4;
}

message DiscoveryConfigList {
  repeated DiscoveryConfigDTO discoverConfigs = 1;
}

//SNMP
message SNMPParameters {
  string readCmString = 1;
  string writeCmString = 2;
}

enum SNMPVersion {
  v1 = 0;
  v2c = 1;
  v3 = 2;
}
/* for SNMP v3
enum SecurityLevel {
  noAuth_noPriv = 0;
  Auth_noPriv = 1;
  Auth_Priv = 2;
}

enum AuthProtocol {
  MD5 = 0;
  SHA = 1;
  SHA224 = 2;
  SHA256 = 3;
  SHA512 = 4;
}

enum PrivacyProtocol {
  DES = 0;
  AES = 1;
  AES192 = 2;
  AES256 = 3;
}

message SNMPParametersV3 {
  string securityName = 1;
  SecurityLevel securityLevel = 2;
  string authPassphrase = 3;
  AuthProtocol authProtocol = 4;
  string privacyPassphrase = 5;
  PrivacyProtocol privacyProtocol = 6;
  string engineId = 7;
  string contextEngineId = 8;
  string contextName = 9;
  string enterpriseId = 10;
}
*/


message SNMPConfigDTO {
  string configName = 1;
  SNMPVersion version = 2;
  string firstIP = 3;
  optional string lastIP = 4;
  int64 timeout = 5;
  int32 retries = 6;
  int32 port = 7;
  string proxyHost = 8;
  int64 maxRequestSize = 9;
  int32 maxVarsPerPdu = 10;
  int32 maxRepetitions = 11;
  int64 ttl = 12;
  SNMPParameters parameters = 13;
  bool sentEvent = 14;
  bool sentLocally = 15;
}

message SNMPConfigList {
  repeated SNMPConfigDTO snmpConfigs = 1;
}

message ConfigResults {
  DiscoveryConfigDTO discoveryConfig = 1;
  SNMPConfigDTO snmpConfig = 2;
}

service DiscoveryConfigOperation {
  rpc createConfig(DiscoveryConfigRequest) returns (ConfigResults);
  rpc listDiscoveryConfig(google.protobuf.Empty) returns(DiscoveryConfigList);
  rpc listSnmpConfig(google.protobuf.Empty) returns(SNMPConfigList);
  rpc listDiscoveryConfigByLocation(google.protobuf.StringValue) returns(DiscoveryConfigList);
  rpc listSnmpConfigByLocation(google.protobuf.StringValue) returns(SNMPConfigList);
  rpc getDiscoveryConfigByName(google.protobuf.StringValue) returns (DiscoveryConfigDTO);
  rpc getSnmpConfigByName(google.protobuf.StringValue) returns (SNMPConfigDTO);
}
